// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TManagement.Entities;

#nullable disable

namespace TManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240928074550_AddSystemNotification")]
    partial class AddSystemNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ADMINS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secretary"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reports"
                        });
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a77"),
                            CurrentStatus = 1,
                            EducationLevelId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a79"),
                            Email = "Atallah.esaied@gmail.com",
                            FullName = "System admin",
                            PasswordHash = "638B0CEF33FA0A8A022FCD9FD1ACF4DDD4DA7507CE2E5228E26C1F09B25E58266BEA37E9D4C8A420954CD7BEF0EC8F2ED17DDCF1334BBA2EC8798A7E783EF1C9",
                            PasswordSalt = "3FD9B3C5AF3541ABFDCF3F31F2876C8997857B4B18E074A9D462F8C905D435299EFE51838B264F9BE5B2858B9E8DACC61B899D2C35F703FCBF4DCA2A4BB5F0B3"
                        });
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1676eb1-cde4-483b-8f0d-981adf9a1bd6"),
                            GroupId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FatherLookupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FatherLookupId");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Palestine",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Jordan",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a77"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Jerusalem",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("19d6a2b4-f41f-4d36-908e-6c130c005ff1"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Amman",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("d352ffaf-aad8-4771-9579-2e3467338b60"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Ramallah",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("931202e3-deb3-49ba-bf40-9d1a84885d18"),
                            Name = "Elemantary",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("5d615fa5-3417-4195-acde-4146fa976f88"),
                            Name = "Tawjihi",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a79"),
                            Name = "BA/BS",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("4dbe705a-146d-41ea-8949-ef87be9ff8f8"),
                            Name = "Master and above",
                            Type = 21
                        });
                });

            modelBuilder.Entity("TManagement.Entities.SystemNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "City")
                        .WithMany("CityUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.Lookup", "EducationLevel")
                        .WithMany("EducationLevelUsers")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.HasOne("TManagement.Entities.AppGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.AppUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "FatherLookup")
                        .WithMany()
                        .HasForeignKey("FatherLookupId");

                    b.Navigation("FatherLookup");
                });

            modelBuilder.Entity("TManagement.Entities.SystemNotification", b =>
                {
                    b.HasOne("TManagement.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Navigation("CityUsers");

                    b.Navigation("EducationLevelUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
