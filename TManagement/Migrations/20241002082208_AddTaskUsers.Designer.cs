// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TManagement.Entities;

#nullable disable

namespace TManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241002082208_AddTaskUsers")]
    partial class AddTaskUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ADMINS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secretary"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reports"
                        });
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a77"),
                            CurrentStatus = 1,
                            EducationLevelId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a79"),
                            Email = "Atallah.esaied@gmail.com",
                            FullName = "System admin",
                            PasswordHash = "7526916E1AE0CE3F156F1D177F454E414AC4B69FAD50E160E0933E06148114C527FB56EEA73E03F92DEE7F3EA4F34F3AF8C359C9195AE9A1E3730760860288EF",
                            PasswordSalt = "47FCB5C65FC67022C38C05C00965DDD19B2C1919381A0093B6C5E5ED7CB75E8A165BB053AFB025A5451C166099077517E3D1BE464E6F7039108492412CBB2655"
                        });
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7352666-5593-4cff-9443-6db0a1b9dcbc"),
                            GroupId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TManagement.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("TManagement.Entities.ETask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TManagement.Entities.ETaskUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("ETaskUsers");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FatherLookupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FatherLookupId");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Palestine",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Jordan",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a77"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Jerusalem",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("46baabeb-030b-49f1-b6e5-cd02e313956e"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Amman",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("8bf52a09-678c-470e-a8e9-ad95fe2c1d7f"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Ramallah",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("e17c10fd-e4c0-47cc-a3bc-c5ef3e229b4a"),
                            Name = "Elemantary",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("29be72b1-3a33-4188-9fc7-0579adac9ffa"),
                            Name = "Tawjihi",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a79"),
                            Name = "BA/BS",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("f3e1ba09-f161-4f62-824a-8db683276850"),
                            Name = "Master and above",
                            Type = 21
                        });
                });

            modelBuilder.Entity("TManagement.Entities.SystemNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("TManagement.Entities.TaskAttachment", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("TaskAttachments");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "City")
                        .WithMany("CityUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.Lookup", "EducationLevel")
                        .WithMany("EducationLevelUsers")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.HasOne("TManagement.Entities.AppGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.AppUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TManagement.Entities.ETaskUsers", b =>
                {
                    b.HasOne("TManagement.Entities.ETask", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.AppUser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "FatherLookup")
                        .WithMany()
                        .HasForeignKey("FatherLookupId");

                    b.Navigation("FatherLookup");
                });

            modelBuilder.Entity("TManagement.Entities.SystemNotification", b =>
                {
                    b.HasOne("TManagement.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("TManagement.Entities.TaskAttachment", b =>
                {
                    b.HasOne("TManagement.Entities.Attachment", "Attachments")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.ETask", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachments");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TManagement.Entities.ETask", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Navigation("CityUsers");

                    b.Navigation("EducationLevelUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
