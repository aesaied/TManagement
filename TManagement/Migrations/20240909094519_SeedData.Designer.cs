// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TManagement.Entities;

#nullable disable

namespace TManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240909094519_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FatherLookupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FatherLookupId");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Palestine",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Jordan",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a77"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Jerusalem",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("d64b206b-f63b-4eed-a8af-4eaa1cf9d5a7"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a76"),
                            Name = "Amman",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("116ae3a3-71b1-4d39-bc89-7618afa622bb"),
                            FatherLookupId = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a75"),
                            Name = "Ramallah",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("277321a7-2360-49e2-9cbe-525342a6d693"),
                            Name = "Elemantary",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("15ed9a59-3c4b-411b-9b0f-7fdd66d41c07"),
                            Name = "Tawjihi",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("cfe43cb8-7b8d-4955-bca1-491971508a79"),
                            Name = "BA/BS",
                            Type = 21
                        },
                        new
                        {
                            Id = new Guid("3c6f7ef2-819e-4b02-b914-12745e111743"),
                            Name = "Master and above",
                            Type = 21
                        });
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "City")
                        .WithMany("CityUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.Lookup", "EducationLevel")
                        .WithMany("EducationLevelUsers")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("TManagement.Entities.AppUserGroup", b =>
                {
                    b.HasOne("TManagement.Entities.AppGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TManagement.Entities.AppUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.HasOne("TManagement.Entities.Lookup", "FatherLookup")
                        .WithMany()
                        .HasForeignKey("FatherLookupId");

                    b.Navigation("FatherLookup");
                });

            modelBuilder.Entity("TManagement.Entities.AppGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TManagement.Entities.AppUser", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("TManagement.Entities.Lookup", b =>
                {
                    b.Navigation("CityUsers");

                    b.Navigation("EducationLevelUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
